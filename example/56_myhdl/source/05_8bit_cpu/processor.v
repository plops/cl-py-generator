// File: processor.v
// Generated by MyHDL 0.11
// Date: Sat Jun 19 11:36:12 2021


`timescale 1ns/10ps

module processor (
    clk,
    rst,
    di,
    do,
    adr,
    we
);


input clk;
input rst;
output [7:0] di;
reg [7:0] di;
input [7:0] do;
output [7:0] adr;
reg [7:0] adr;
output we;
reg we;

reg [7:0] am;
reg [2:0] cyc;
reg [7:0] im;
reg [7:0] ir;
reg [10:0] pc;
reg [7:0] ra;
reg [7:0] rw;
reg [7:0] rx;
reg [7:0] sr;



always @(posedge clk) begin: PROCESSOR_LOGIC
    if (rst) begin
        pc <= 0;
        adr <= 0;
    end
    else if ((cyc == 0)) begin
        adr <= (pc + 1);
        pc <= (pc + 1);
        cyc <= 1;
    end
    else if ((cyc == 1)) begin
        adr <= (pc + 1);
        ir <= do;
        cyc <= 2;
    end
    else if ((cyc == 2)) begin
        im <= do;
        am <= (ir & 7);
        ir <= ((ir >>> 3) & 31);
        cyc <= 3;
    end
    else if ((cyc == 3)) begin
        case (ir)
            'h0: begin
                case (am)
                    'h1: begin
                        ra <= im;
                        pc <= (pc + 1);
                    end
                    'h2: begin
                        adr <= ((do << 8) | im);
                        pc <= (pc + 2);
                    end
                    'h4: begin
                        adr <= ((do << 8) | (im + rx));
                        pc <= (pc + 2);
                    end
                endcase
            end
            'h1: begin
                case (am)
                    'h2: begin
                        adr <= ((do << 8) | im);
                        we <= 1;
                        di <= ra;
                        pc <= (pc + 2);
                    end
                    'h4: begin
                        adr <= ((do << 8) | (im + rx));
                        we <= 1;
                        di <= ra;
                        pc <= (pc + 2);
                    end
                endcase
            end
            'h11: begin
                pc <= (pc + 1);
            end
            'h7: begin
                rx <= ra;
                rw <= 1;
            end
            'h6: begin
                ra <= rx;
            end
            'h8: begin
                rx <= (rx + 1);
                rw <= 1;
            end
            'hf: begin
                rw <= 2;
                sr <= {(128 <= ($signed({1'b0, ra}) - $signed({1'b0, im}))), (($signed({1'b0, ra}) - $signed({1'b0, im})) == 0), sr[6-1:0]};
                pc <= (pc + 1);
            end
            'ha: begin
                ra <= (ra + im);
                pc <= (pc + 1);
            end
            'hc: begin
                ra <= (ra & im);
                pc <= (pc + 1);
            end
            'hd: begin
                ra <= (ra | im);
                pc <= (pc + 1);
            end
            'h4: begin
                ra <= (ra << im);
                pc <= (pc + 1);
            end
        endcase
        cyc <= 4;
    end
    else if ((cyc == 4)) begin
        if (1'b1) begin
            we <= 0;
            adr <= pc;
        end
        cyc <= 5;
    end
    else if ((cyc == 5)) begin
        if ((ir == 17)) begin
            ra <= do;
            sr <= {(128 <= do), (do == 0), sr[6-1:0]};
        end
        else if ((rw == 0)) begin
            sr <= {(128 <= ra), (ra == 0), sr[6-1:0]};
        end
        else if ((rw == 1)) begin
            sr <= {(128 <= ra), (rx == 0), sr[6-1:0]};
        end
        if ((ir == 23)) begin
            pc <= ((do << 8) | (pc & 255));
            adr <= ((do << 8) | (pc & 255));
        end
        else begin
            adr <= pc;
        end
        we <= 0;
        rw <= 0;
        cyc <= 0;
    end
end

endmodule
