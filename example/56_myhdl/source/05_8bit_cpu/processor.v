// File: processor.v
// Generated by MyHDL 0.11
// Date: Thu Jun 17 09:07:44 2021


`timescale 1ns/10ps

module processor (
    clk,
    rst,
    di,
    do,
    adr,
    we
);


input clk;
input rst;
output [7:0] di;
reg [7:0] di;
input [7:0] do;
output [15:0] adr;
reg [15:0] adr;
output we;
reg we;

reg [7:0] am;
reg [2:0] cyc;
reg [7:0] im;
reg [7:0] ir;
reg [10:0] pc;
reg [7:0] ra;
reg [7:0] rw;
reg [7:0] rx;
reg [7:0] sp;
reg [7:0] sr;



always @(posedge clk) begin: PROCESSOR_LOGIC
    if (rst) begin
        pc <= 0;
        adr <= 0;
    end
    else if ((cyc == 0)) begin
        adr <= (pc + 1);
        pc <= (pc + 1);
        cyc <= 1;
    end
    else if ((cyc == 1)) begin
        adr <= (pc + 1);
        ir <= do;
        cyc <= 2;
    end
    else if ((cyc == 2)) begin
        im <= do;
        am <= (ir & 7);
        ir <= ((ir >>> 3) & 31);
        if (((ir >>> 3) == 16)) begin
            adr <= (sp + 1);
            sp <= (sp + 1);
        end
        cyc <= 3;
    end
    else if ((cyc == 3)) begin
        case (ir)
            'h0: begin
                case (am)
                    'h1: begin
                        ra <= im;
                        pc <= (pc + 1);
                    end
                    'h2: begin
                        adr <= ((do << 8) | im);
                        pc <= (pc + 2);
                    end
                    'h4: begin
                        adr <= ((do << 8) | (im + rx));
                        pc <= (pc + 2);
                    end
                endcase
            end
            'h1: begin
                case (am)
                    'h2: begin
                        adr <= ((do << 8) | im);
                        we <= 1;
                        di <= ra;
                        pc <= (pc + 2);
                    end
                    'h4: begin
                        adr <= ((do << 8) | (im + rx));
                        we <= 1;
                        di <= ra;
                        pc <= (pc + 2);
                    end
                endcase
            end
            'h7: begin
                rx <= ra;
                rw <= 1;
            end
            'h6: begin
                ra <= rx;
            end
            'h8: begin
                rx <= (rx + 1);
                rw <= 1;
            end
            'h9: begin
                rx <= (rx - 1);
                rw <= 1;
            end
            'h2: begin
                adr <= sp;
                sp <= (sp - 1);
                di <= ra;
                we <= 1;
            end
            'h3: begin
                sp <= (sp + 1);
                adr <= (sp + 1);
            end
            'hf: begin
                rw <= 2;
                sr <= {(128 <= ($signed({1'b0, ra}) - $signed({1'b0, im}))), (($signed({1'b0, ra}) - $signed({1'b0, im})) == 0), sr[6-1:0]};
                pc <= (pc + 1);
            end
            'h13: begin
                adr <= sp;
                sp <= (sp - 1);
                di <= ((pc + 2) >>> 8);
                we <= 1;
            end
            'h10: begin
                adr <= (sp + 1);
                sp <= (sp + 1);
            end
            'h14: begin
                pc <= ((do << 8) | im);
            end
            'ha: begin
                ra <= (ra + im);
                pc <= (pc + 1);
            end
            'hb: begin
                ra <= (ra - im);
                pc <= (pc + 1);
            end
            'hc: begin
                ra <= (ra & im);
                pc <= (pc + 1);
            end
            'hd: begin
                ra <= (ra | im);
                pc <= (pc + 1);
            end
            'he: begin
                ra <= (ra ^ im);
                pc <= (pc + 1);
            end
            'h4: begin
                ra <= (ra << im);
                pc <= (pc + 1);
            end
            'h5: begin
                ra <= (ra >>> im);
                pc <= (pc + 1);
            end
        endcase
        cyc <= 4;
    end
end

endmodule
