- contents

| file  | level | comment                                                             |
|-------+-------+---------------------------------------------------------------------|
| gen00 |     3 | dff some simple tests http://myhdl.org/docs/examples/flipflops.html |
| gen01 |     3 | dffa                                                                |
| gen02 |     3 | latch                                                               |
| gen03 |     2 | gowin tang nano led blink                                           |
  
- install
  #+begin_example
pip3 install --user myhdl
  #+end_example

- run
  #+begin_example
  cd source
  python3 run_00_flop.py
gtkwave test_dff.vcd
  #+end_example

- https://www.youtube.com/watch?v=LSgOpvr8FII
  - MyHDL designing digital hardware with Python by Jan Decaluwe
  - https://www.easics.com/
  - http://cmosis.com  
  - http://icsense.com
  - determinism
    - output should not depend on order of computation
    - Signal class is leaf object of determinism
    - scheduler is the simulator it handles the updates
  - hardware type widths
  - decorators:
    - @instance
    - @always
    - @always_comb automatic sensitivity
    - @always_seq writes reset automatically
  - intbv integer with bit vector
    - intbv(0,min=-1,max=8)
  - 2 compilers
    - to simulator
    - to gate implementation
    - synthesis (synopsis became big on this)
    - language based design for hardware
    - rather restricted
      - register transfer level is quite a low level
    - worried about python3 a bit
  - verification is the most important
    - testbenches
    - iterate until everything works
    - strongest point of MyHDL
    - benefits from python's expressive power
    - agile hardware design
    - test driven design for hardware
    - foundation is the MyHDL simulator
      - update signal values
      - check which generators become active
      - run in any order
    - waveform viewing (is an important tool but overrated)
      - you need self checking test framework
    - pypy is a python2.7 compliant interpreter
      - just in time technology
      - 8-20 faster benchmarks
  - future
    - fixed point support
    - attribute lookup for interfaces
    - python 3

- verilog code formatter
  #+begin_example
git clone https://github.com/thomasrussellmurphy/istyle-verilog-formatter
cd istyle-verilog-formatter
make
iStyle
  #+end_example

- when place & route complains about pin can't be assigned because it is MSPI or SSPI, go to
  project->configuration->dual-purpose pin-> use as regular io

- how to program
#+begin_example

cd /home/martin/gowin_fpga/b/Programmer/bin
sudo ./programmer
Edit->Cable
Burn
/home/martin/stage/cl-py-generator/example/56_myhdl/source/04_tang_lcd/impl/pnr/lcd_project.fs
#+end_example
 
 
- 8bit cpu with many features disabled
- 132 MHz
- 173/1152 logic (165 lut, 8 alu)
- 63/945 register (54 ff, 9 io ff)
- 102/576 cls
- 4.2mW

- 8bit cpu with everything on
- 91MHz
- 483/1152 logic (459 lut, 24 alu)
- 74/945 reg (67 ff, 7 io ff)
- 276/576 cls
- in 10
- out 17
- 17.8mW

- 8bit cpu nearly minimal but add, and, or, >>
- 96MHz
- 229/1152 (213 lut, 16 alu)
- 63/945 reg
- 133/576 cls
