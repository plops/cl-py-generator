- https://nmigen.info/nmigen/latest/intro.html
- https://vivonomicon.com/2020/04/14/learning-fpga-design-with-nmigen/
- https://github.com/cpldcpu/MCPU/tree/master/verilog
- https://github.com/m-labs/nmigen/blob/master/doc/PROPOSAL.md
- https://github.com/RobertBaruch/nmigen-tutorial/blob/master/6_combining.md

- wrong repo?
#+begin_example
pip3 install --user nmigen #installs 0.2
#git clone https://github.com/m-labs/nmigen
pip3 install --user git+https://github.com/m-labs/nmigen.git
#+end_example
- try this: https://nmigen.info/nmigen/latest/install.html

  #+begin_example
#pip3 install --user --upgrade nmigen[builtin-yosys
pip3 install --user 'git+https://github.com/nmigen/nmigen.git#egg=nmigen[builtin-yosys]'
sudo dnf install pypy3 pypy3-devel
pypy3 -m ensurepip
pypy3 -m pip install --user 'git+https://github.com/nmigen/nmigen.git#egg=nmigen[builtin-yosys]'
pypy3 -m pip install --user wheel 
pypy3 -m pip install --user numpy
#pypy3 -m pip install --user jax jaxlib
pypy3 -m pip install --user pandas
  #+end_example

- https://www.youtube.com/watch?v=85ZCTuekjGA
  - Robert Baruch: Building a 6800 CPU on an FPGA with nMigen (part 1)
  - pinball machine
  - ice40-hx8k
    - bidirectional logic shifters
  - 2 8bit accumulators
  - 16bit index reg, stack pointer, program counter
  - some flags
  - 16bit address but
  - 8bit data bus
  - two clocks phase1, phase2
    - read mem:
      - after posedge phase1 set addr (stable after tAD)
      - access time t_acc 
      - relative to negedge of phase2 (that is when the cpu latches the data being read)
    - write mem
      - addr set at posedge phase1
  - at least two cycles
  - explanation of ADC (add with carry)
	
  - https://www.youtube.com/watch?v=AQOXoKQhG3I (part 2)
    - blinking an led
    - elaboratable
    - simulator of combinatorial logic with explicit delays
    - boolector proof engine for formal verification
      
    - Assert: truncate adder result to 8 bits for formal verification
      bmc (bounded model check) to pass
#+begin_example
python3 adder.py generate -t il > toplevel.il
sby -f adder.sby
#+end_example
    - nmigen.asserts.Cover: find adder.y == 1
    - `Assume(adder.x == (adder.y << 1))`
    - Clocky(Elaborate)
    - yield waits for one clock period    
    - counter example trace
    - ensure load is zero
      `Past(clocky.load)==0`
  - https://www.youtube.com/watch?v=aLQqOxnVMOQ (part 3)
  - https://www.youtube.com/watch?v=xqMtyCu4lME (part 4)
  - https://www.youtube.com/watch?v=9MMb9dSnNvo (part 5)
  - https://www.youtube.com/watch?v=C6sUaElP9hA (part 6)
  - https://www.youtube.com/watch?v=AerXEa84jsc (part 7)
  - https://www.youtube.com/watch?v=6acCiGBjM6s (part 8)
  - https://www.youtube.com/watch?v=Xe1cbCZIaKQ (part 9)
  - https://www.youtube.com/watch?v=rbakgYM4b9I (part 10)
  - https://www.youtube.com/watch?v=PSpk3R4VfWU (part 11)
    - needs hx4k
  - https://github.com/RobertBaruch/n6800
