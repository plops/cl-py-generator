
#+begin_example
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig
pip3 install --user av

    error: command '/usr/lib64/ccache/gcc' failed with exit code 1
    ----------------------------------------
ERROR: Command errored out with exit status 1: /usr/bin/python3 -u -c 'import io, os, sys, setuptools, tokenize; sys.argv[0] = '"'"'/tmp/pip-install-8fe5kyik/av_748416fa3d684e88ac8c0bdc72d08788/setup.py'"'"'; __file__='"'"'/tmp/pip-install-8fe5kyik/av_748416fa3d684e88ac8c0bdc72d08788/setup.py'"'"';f = getattr(tokenize, '"'"'open'"'"', open)(__file__) if os.path.exists(__file__) else io.StringIO('"'"'from setuptools import setup; setup()'"'"');code = f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' install --record /tmp/pip-record-3ioskj5o/install-record.txt --single-version-externally-managed --user --prefix= --compile --install-headers /home/martin/.local/include/python3.10/av Check the logs for full command output.

pip3 install --user opencv-python scikit-image

https://learnopencv.com/read-write-and-display-a-video-using-opencv-cpp-python/
#+end_example
https://github.com/rodegerdts/Pyalmanac
https://rhodesmill.org/skyfield/
https://github.com/skyfielders/python-skyfield/blob/master/skyfield/data/hipparcos.py

#+begin_example
pip3 install --user skyfield
wget https://cdsarc.u-strasbg.fr/ftp/cats/I/239/hip_main.dat # 51MB
#+end_example
https://www.cosmos.esa.int/web/hipparcos/catalogues
https://www.cosmos.esa.int/documents/532822/553204/sect2_01.pdf/88f60038-085c-4cf0-9de0-42af104e8ae1

- a master thesis trying to train haar classifiers
https://www.instructables.com/Star-Recognition-Using-Computer-Vision-OpenCV/
https://github.com/raspberrystars/CV-Star-Sensor
- geometry
https://www.youtube.com/watch?v=IvgfFeqmSwo

- local maxima and local contrast
https://scikit-image.org/docs/dev/auto_examples/segmentation/plot_extrema.html

- stacking images
  - fit linear gradient for light pollution
  - difference of gaussians
  - fit gaussian locally
  - camera model (intrinsic and extrinsic matrix, neglect distortion)
  - constellation matching
https://benedikt-bitterli.me/astro/
  

- james webb observations
  https://www.youtube.com/watch?v=fI-VD5QWQYU

- point set registration
  https://en.wikipedia.org/wiki/Point_set_registration
https://www.youtube.com/watch?v=dhzLQfDBx2Q
ICP & Point Cloud Registration - Part 1: Known Data Association & SVD (Cyrill Stachniss, 2021)
https://www.youtube.com/watch?v=ktRqKxddjJk ICP iterative closest point
https://www.youtube.com/watch?v=CJE59i8oxIE least squares
https://github.com/niosus/notebooks/blob/master/icp.ipynb

- https://www.youtube.com/watch?v=RhF9u1EAU8k
  Use this TRICK to FIND OBJECTS in the SKY with a Telescope, a Laptop and a Camera // EAA PUSH-TO
- astrometry.net
  - If you have astronomical imaging of the sky with celestial
    coordinates you do not know—or do not trust—then Astrometry.net is
    for you. Input an image and we'll give you back astrometric
    calibration meta-data, plus lists of known objects falling inside
    the field of view.
  - http://github.com/dstndstn/astrometry.net source code
  - http://astrometry.net/doc/readme.html documentation
  - paper:
    - Lang, D., Hogg, D.W., Mierle, K., Blanton, M., & Roweis, S.,
      2010, Astrometry.net: Blind astrometric calibration of arbitrary
      astronomical images, The Astronomical Journal 139, 1782--1800.
    - 10.1088/0004-6256/139/5/1782
    - algorithm:
      - robust star detection
	- subtract median smoothed image to remove sky variations
	- estimate image noise by
	  - selecting 3000 random pairs of pixels separated by 5 rows
            and columns
	  - flux difference for each pair
	  - compute variance -> approximately twice the variance
            sigma^2 in each pixel
      - detect compact objects
	- use pixels with with values > 8 sigma
	- merge connected components into objects
	- find peak in each object
	  - local peak
	  - exclude peaks that are joined by saddle points within 3
            sigma of a larger peak (or 1% of the larger peaks value,
            whatever is greater)
	- compute centroid
	  - fit gaussian to 3x3 grid around star's peak
	  - if outside 3x3 default to peak pixel (usually this is an
            artifact)
      - geometric hash of sets of 4 stars
	- this is a 4d search:
	  - pointing of camera axis (2d)
	  - orientation  (rotation of camera around axis, 1d)
	  - field of view (solid angle subtended by camera image, 1d)
	- the hash code represents the relative position of the 4 stars
	  - most widely separated stars A and B define local coordinate system
	  - remaining stars C and D create hash code vector (x_C,y_C,x_D,y_D)
	  - C and D must be in the circle that has A and B on diameter
	  - two symmetries:
	    - swap A and B
	    - swap C and D
	  - to break symmetry force x_C<=x_D and x_C+x_D <= 1
	  - code vector is invariant to
	    - translation
	    - scaling
	    - rotation
	- search for similar hash codes in an index -> location, scale
          and orientation in the sky
	- bayesian decision if the alignment is correct
	- recognize images that span < 1e-6 area of the sky
	- using 5 stars in hash makes it more likely that not all
          stars are captured
#+begin_example      
Job 6062285:
Success

Source extraction image (fullsize)
Log file tail [-]
(full)

  B =            0           0  7.5536e-05
                 0  1.5696e-05
       -3.6992e-06
  AP =     -0.10537 -0.00029953  1.2102e-07
       -2.1926e-05 -8.3652e-05
       -2.3552e-05
  BP =    -0.029927   0.0002898 -7.3252e-05
        0.00013301 -1.5928e-05
        3.4403e-06
  sqrt(det(CD))=132.575 [arcsec]
Found tag-along columns from field: FLUX BACKGROUND
Field 1: solved with index index-4116.fits.
Field 1: tried 15092 quads, matched 57168 codes.
Spent 3.69566 s user, 0.272006 s system, 3.96766 s total, 3.96876 s wall time.
Writing 79 rows (of 345 field and 88 index objects) to correspondence file.
cx<=dx constraints: 0
meanx constraints: 72765
RA,Dec constraints: 0
AB scale constraints: 0
Spent 3.97598 seconds on this field.
#+end_example

#+begin_example
Center (RA, Dec):	(274.631, 3.413)
Center (RA, hms):	18h 18m 31.391s
Center (Dec, dms):	+03° 24' 47.286"
Size:	40.7 x 16.2 deg
Radius:	21.911 deg
Pixel scale:	133 arcsec/pixel
Orientation:	Up is 33.3 degrees E of N
#+end_example

- build on fedora 35
#+begin_example
sudo dnf -y install cairo-devel libpng-devel libjpeg-turbo-devel zlib-devel bzip2-devel swig python-devel cfitsio-devel wcslib-devel
sudo dnf -y install netpbm netpbm-devel netpbm-progs
#sudo dnf -y install python3-astropy
git clone https://github.com/dstndstn/astrometry.net
./configure
make -j6
make -j6 py
make -j6 extra
# directory has 208M after build
sudo make install # in /usr/local/astrometry 
cd /usr/local/astrometry/data
for i in $( seq -w 7 19 ); do wget http://data.astrometry.net/4100/index-41$i.fits; done

#+end_example

#+begin_example
# pip install --user pyfits # pyfits is deprecated in favor of astropy
pip install --user astropy
export PATH=${PATH}:/usr/local/astrometry/bin
cd demo
time solve-field apod2.jpg
#+end_example

#+begin_example
[martin@localhost demo]$ time solve-field /dev/shm/sky.png 
Reading input file 1 of 1: "/dev/shm/sky.png"...
Read file stdin: 1106 x 439 pixels x 1 color(s); maxval 255
Using 8-bit output
Extracting sources...
simplexy: found 1449 sources.
cairoutils.c:715:cairoutils_read_ppm_stream: Netpbm is not available; can't read PPM images
cairoutils.c:715:cairoutils_read_ppm_stream: cairoutils.c:715:cairoutils_read_ppm_stream: Netpbm is not available; can't read PPM images
Netpbm is not available; can't read PPM images
cairoutils.c:715:cairoutils_read_ppm_stream: Netpbm is not available; can't read PPM images
libpng warning: Image width is zero in IHDR
libpng warning: Image height is zero in IHDR
libpng error: Invalid IHDR data
solve-field.c:327:plot_source_overlay Plotting command failed
 solve-field.c:133:run_command Command was: "/usr/local/astrometry/bin/plotxy -I /tmp/tmp.ppm.7BPz71 -i /dev/shm/sky.axy -C red -w 2 -N 50 -x 1 -y 1 -P | /usr/local/astrometry/bin/plotxy -i /dev/shm/sky.axy -I - -w 2 -r 3 -C red -n 50 -N 200 -x 1 -y 1 > /dev/shm/sky-objs.png"

 solve-field.c:132:run_command Command exited with exit status 134
Solving...
Reading file "/dev/shm/sky.axy"...
Field 1 did not solve (index index-4119.fits, field objects 1-10).
Field 1 did not solve (index index-4118.fits, field objects 1-10).
Field 1 did not solve (index index-4117.fits, field objects 1-10).
  log-odds ratio 281.474 (1.74793e+122), 77 match, 2 conflict, 125 distractors, 88 index.
  RA,Dec = (274.544,3.38952), pixel scale 133.315 arcsec/pix.
  Hit/miss:   Hit/miss: ++++++++++++++++++-+++++++++--+-+++++++++-+++-+++-+++++--++-+-+-++++----+---c-----+++--+--+-+---+---
Field 1: solved with index index-4116.fits.
Field 1 solved: writing to file /dev/shm/sky.solved to indicate this.
Field: /dev/shm/sky.png
Field center: (RA,Dec) = (274.520687, 3.353554) deg.
Field center: (RA H:M:S, Dec D:M:S) = (18:18:04.965, +03:21:12.794).
Field size: 38.1296 x 15.745 degrees
Field rotation angle: up is 146.8 degrees E of N
Field parity: neg
Creating new FITS file "/dev/shm/sky.new"...


real	0m4.630s
user	0m4.293s
sys	0m0.716s
#+end_example
