- install
#+begin_example
cd ~/src
git clone https://github.com/Sterncat/opticspy
pip3 install --user -e opticspy

# edit opticspy/__init__.py and remove mplot3d
#+end_example


- http://opticspy.org/


- contents
| file  | state | comment                                                                          |
|-------+-------+----------------------------------------------------------------------------------|
| gen00 |   90% | try opticspy, it has material models and paraxial approximation but is very slow |
| gen01 |   50% | ray tracer with jax                                                              |
| gen02 |       | notebook                                                                         |
- plan for gen01
  - keep system information in pandas dataframe
  - use opticspy to compute paraxial parameters and pupil, use its index model
    - i think opticspy just uses the pytmm material database 
  - implement sequential raytracer through spheres with jax
  - compute waveaberration


- references
  - short overview of jax https://www.youtube.com/watch?v=0mVmRHMaOJ4
  - 1h talk on jax: https://www.youtube.com/watch?v=BzuEGdGHKjc
#+begin_example
jax.vmap        apply to each element of a vector
jax.make_jaxpr  show the internal decomposition of the xla code
jax.devices()   number of devs
jax.pmap        shard accross multiple devices

psum axis_name

jvp
vjp


  
#+end_example

- oryx probabilistic programming
  - given a function that generates a sample from a distribution can
   you give back a function that returns the log joint density
  - inverse .. automatic function inversion (maybe useful to find pupil?)
  - reap, plant .. change values

- http://resources.mpi-inf.mpg.de/lensflareRendering/pdf/flare.pdf
  - ray tracing lens flares
  - only sequences involving an even number of reflections impinge on the sensor
  - those with more than two reflections can usually be ignored
  - enumerate all two-reflection sequences
    - for n fresnel interfaces in an optical system, there are N=n*(n-1)/2 such sequences
  - at each intersection compare hitpoint of ray with diameter of
    surface, record maximum normalized distance from the optical axis
    - r_rel = max (r_rel, r/r_surface)
  - as ray passes through aperture plane, a pair of intersection
    coordinates (ua, va) is stored

- how to find chief ray of camera objective
  - trace ray from object space (with finite field angle) into the system until the surface with the stop
  - vary ray angle until stop is hit on optical axis

- truth table to select the correct tau:
  - jax can't jit my if expressions. try to reformulate the logic as a single expression that can go into np.where
  - if both tau positive: ray faces sphere and is intersecting. the smaller tau1 (with b-..) is the first intersection
  - if one tau is positive and one is negative, then ray is shooting from inside the sphere (and we want the positive)

  - i think the top three lines of this table convey the happy path of
    the ray tracer. in the last case the lens is entirely behind the
    ray

| t0>0 | t1>0 | t1*t0 < 0 | out           |
|------+------+-----------+---------------|
|    1 |    1 |         0 | t1            |
|    0 |    1 |         1 | t1            |
|    1 |    0 |         1 | t0            |
|------+------+-----------+---------------|
|    0 |    0 |         0 | *no solution* |
|      |      |           |               |
  
  - the following expression should work:
#+begin_example
np.where( t0>0 & t1<=0 , t0, t1)
#+end_example

- how to measure optical path length for an object in infinity?
  - ray origins for bundle of rays through all pupil points should be on a plane perpendicular to the direction of the incidident beam
